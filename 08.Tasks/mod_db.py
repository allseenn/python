import random
import datetime
import os
BASE = "base.csv"

def generate(size):
    if os.path.isfile(BASE):
        return f"{BASE} уже существует!"
    if int(size) <=0:
        return "Не задан размер базы"
    elif int(size) > 0:
        syllables = ['ба', 'бо', 'бу', 'бы', 'би', 'бя', 'бю', 'бе', 'ва', 'во', 'ву', 'вы', 'вэ', 'ви', 'вя', 'вю', 'ве', 'да', 'до', 'ду', 'ды', 'ди', 'дя', 'дю', 'де', 'га', 'го', 'гу', 'ги', 'гя', 'гю', 'ге', 'за', 'зо', 'зу', 'зи', 'зя', 'зю', 'зе', 'ка', 'ко', 'ку', 'ки', 'кя', 'кю', 'ке', 'са', 'со', 'су', 'сы', 'си', 'ся', 'сю', 'се', 'па', 'по', 'пу', 'пы', 'пи', 'пя', 'пю', 'пе', 'жа', 'жо', 'жу', 'жи', 'жю', 'же', 'ла', 'ло', 'лу', 'лы', 'ли', 'ля', 'лю', 'ле', 'ма', 'мо', 'му', 'мы', 'ми', 'мя', 'мю', 'ме', 'на', 'но', 'ну', 'ны', 'ни', 'ня', 'ню', 'не', 'ра', 'ро', 'ру', 'ри', 'ря', 'рю', 'ре', 'та', 'то', 'ту', 'ти', 'тя', 'тю', 'те', 'ха', 'хо', 'ху', 'хи', 'хя', 'хю', 'хе', 'ца', 'цо', 'цу', 'ци', 'це', 'ша', 'шо', 'шу', 'ши', 'ше', 'ща', 'що', 'щу', 'щи', 'ще', 'ча', 'чо', 'чу', 'чи', 'че', 'фа', 'фо', 'фу', 'фи', 'фя', 'фе', 'аб', 'об', 'уб', 'иб', 'яб', 'юб', 'ав', 'ов', 'ув', 'ив', 'яв', 'юв', 'ев', 'ад', 'од', 'уд', 'ид', 'яд', 'юд', 'ед', 'аг', 'ог', 'уг', 'иг', 'яг', 'юг', 'ег', 'аз', 'оз', 'уз', 'из', 'яз', 'юз', 'ез', 'ак', 'ок', 'ук', 'ик', 'як', 'юк', 'ек', 'ас', 'ос', 'ус', 'ис', 'яс', 'юс', 'ес', 'ап', 'оп', 'уп', 'ип', 'яп', 'юп', 'аж', 'ож', 'уж', 'иж', 'юж', 'еж', 'ал', 'ол', 'ул', 'ил', 'ял', 'юл', 'ел', 'ам', 'ом', 'ум', 'им', 'ям', 'юм', 'ем', 'ан', 'он', 'ун', 'ин', 'ян', 'юн', 'ен', 'ар', 'ор', 'ур', 'ир', 'яр', 'юр', 'ер', 'ат', 'от', 'ут', 'ит', 'ят', 'ют', 'ет', 'ах', 'ох', 'ух', 'их', 'ях', 'юх', 'ех', 'ац', 'оц', 'уц', 'иц', 'яц', 'юц', 'ец', 'аш', 'ош', 'уш', 'иш', 'яш', 'юш', 'еш', 'ач', 'оч', 'уч', 'ич', 'яч', 'юч', 'еч', 'аф', 'оф', 'уф', 'иф', 'яф', 'юф', 'еф']
        endings = ['лин', 'лов', 'нин', 'нов', 'шин', 'шов', 'рин', 'ров', 'пин', 'пов', 'ков', 'кин', 'ко', 'кий', 'ций', 'вич', 'цев', 'цов', 'цин']
        names = ['Андрей', 'Борис', 'Владимир', 'Георгий', 'Дмитрий', 'Евгений', 'Иосиф', 'Кирилл', 'Леонид', 'Михаил', 'Николай', 'Олег', 'Петр', 'Роман', 'Сергей', 'Тимофей', 'Умар', 'Фёдор', 'Харитон', 'Эмануил', 'Юрий', 'Яков']
        middles = ['Андреевич', 'Борисович', 'Владимирович', 'Георгиевич', 'Дмитриевич', 'Евгеньевич', 'Иосифович', 'Кириллович', 'Леонидович', 'Михаилович', 'Николаевич', 'Олегович', 'Петрович', 'Романович', 'Сергеевич', 'Тимофеевич', 'Умарович', 'Фёдорович', 'Харитонович', 'Эмануилович', 'Юрьевич', 'Яковлевич']
        management = ['генеральный директор', 'системный администратор', 'помощник директора', 'главный бухгалтер', 'бухгалтер кассир', 'начальник склада', 'главный инженер',  'инженер сметчик', 'юрисконсульт']
        positions = ['прораб бригады', 'экскаваторщик', 'электромонтёр', 'арматурщик', 'тракторист', 'контролер', 'свайщик', 'сварщик', 'плиточник', 'столяр', 'электрик',  'сантехник', 'рабочий', 'крановщик', 'механик', 'слесарь', 'стажер', 'строитель', 'электрик', 'строитель', 'каменщик', 'бетонщик', 'моляр', 'штукатур', 'монтажник', 'кровельщик', 'высотник', 'сторож', 'сборщик', 'слаботочник', 'уборщик', 'грузчик', 'кладовщик', 'водитель']
        streets = ['Авиационная улица', 'Алёшкинский проезд', 'Ангелов переулок', 'Аэродромная улица', 'Береговая улица', 'Набережная улица', 'Братцевская улица', 'Вишнёвая улица', 'Волоколамский проезд', 'Волоколамское шоссе', 'Волоцкой переулок', 'Воротынская улица', 'Врачебный проезд', 'Дубравная улица', 'Живописная улица', 'Захарьинская улица', 'Звенигородское шоссе', 'Иваньковское шоссе', 'Карамышевская набережная', 'Карамышевский проезд', 'Крылатская улица', 'Куркинское шоссе', 'Ландышевая улица', 'Лодочная улица', 'Лыковский проезд', 'Лётная улица', 'Набережная улица', 'Машкинское шоссе', 'Митинская улица', 'Муравская улица', 'Мякининский проезд', 'Нелидовская улица', 'Неманский проезд', 'Никольский тупик', 'Новогорская улица', 'Новокуркинское шоссе', 'Новопоселковая улица', 'Новотушинская улица', 'Новотушинский проезд', 'Новохорошевский проезд', 'Новощукинская улица', 'Одинцовская улица', 'Окружная улица', 'Парусный проезд', 'Пенягинская улица', 'Пехотная улица', 'Планерная улица', 'Подмосковная улица', 'Полесский проезд', 'Походный проезд', 'Причальный проезд', 'Путилковское шоссе', 'Пятницкое шоссе', 'Родионовская улица', 'Светлогорский проезд', 'Сосновая аллея', 'Сосновая улица', 'Староспасская улица', 'Строгинский бульвар', 'Строгинское шоссе', 'Строительный проезд', 'Сходненская улица', 'Сходненский проезд', 'Сходненский тупик', 'Таллинская улица', 'Таманская улица', 'Тепличный переулок', 'Трикотажный проезд', 'Туристская улица', 'Туркменский проезд', 'Тушинская улица', 'Уваровский переулок', 'Фабричная улица', 'Фабричный проезд', 'Химкинский бульвар', 'Цариков переулок', 'Цветочный проезд', 'Шелепихинская набережная', 'Щукинская улица', 'Юровская улица']
        mobile_prefix = ['910', '915', '916', '917', '919', '985', '986', '903', '905', '906', '909', '962', '963', '964', '965', '966', '967', '968', '969', '980', '983', '986', '925', '926', '929', '936', '999', '901', '958', '977', '999', '995', '996', '999']
        phone_prefix = ['495', '499', '498']
        for i in range(int(size)):
            soc_id = str(random.randint(11111111111, 99999999999))
            last_name = ''.join(random.sample(syllables, random.randint(2, 3)) + random.sample(endings, 1)).title()
            first_name = "".join(random.sample(names, 1))
            middle_name = "".join(random.sample(middles, 1))
            birth_day =  datetime.date.fromtimestamp(random.randint(0, 1000000000)).strftime("%Y-%m-%d")
            if i < len(management):
                position = management[i]
            else:
                position = "".join(random.sample(positions, 1))
            salary = len(position) * 10000
            address = " ".join(random.sample(streets, 1))
            address += " д." + str(random.randint(1, 99)) + " кв." + str(random.randint(1, 300))
            mobile = '8' + ''.join(random.sample(mobile_prefix, 1)) + str(random.randint(1111111, 9999999))
            phone = '8' + ''.join(random.sample(phone_prefix, 1)) + str(random.randint(1111111, 9999999))
            with open(BASE, "a") as file:
                file.write(f'{soc_id};{last_name};{first_name};{middle_name};{birth_day};{position};{salary};{address};{mobile};{phone}\n')
        return f"База размером {size} записей создана"
    else:
        return "Ошибка"

def drop(base=BASE):
    if os.path.isfile(base):
        os.remove(base)
        #os.system("cls")
        return f"{base} удалена!"
    else:
        # os.system("cls")
        return  f"Ошибка: {base} не найдена!"

def save(data):
    with open(BASE, "a") as file:
        file.writelines(f'{data[0]};{data[1]};{data[2]};{data[3]};{data[4]};{data[5]};{data[6]};{data[7]};{data[8]};{data[9]}\n')
    return "Запись сохранена"

def search(data):
    res = []
    with open(BASE, "r") as file:
        base = file.read().split('\n') 
        for item in base:
            line = item.split(';')
            lists = list(filter(None, data))
            if set(lists).issubset(line) and len(line) > 1:
                res.append(line)
    return res

def delete(data):
    res = []
    with open(BASE, "r") as file:
        base = file.read().split('\n') 
        for item in base:
            line = item.split(';')
            lists = list(filter(None, data))
            if not set(lists).issubset(line) and len(line) > 1:
                res.append(line)
    drop()
    with open(BASE, "a") as file:
        for item in res:
            file.write(f'{item[0]};{item[1]};{item[2]};{item[3]};{item[4]};{item[5]};{item[6]};{item[7]};{data[8]};{data[9]}\n')
    return f'Удалено {len(base)-len(res)-1} зап.'

def edit(data):
    res = []
    record = 0
    with open(BASE, "r") as file:
        base = file.read().split('\n') 
        for item in base:
            line = item.split(';')
            if data[0] == line[0] and len(line) > 1:
                res.append(data)
                record +=1
            elif len(line) > 1:
                res.append(line)
    drop()
    with open(BASE, "a") as file:
        for item in res:
            file.write(f'{item[0]};{item[1]};{item[2]};{item[3]};{item[4]};{item[5]};{item[6]};{item[7]};{data[8]};{data[9]}\n')
    return f'Изменена {record} зап.'

def upload(upload):
    with open(BASE, "a") as file:
        for data in upload:
            file.writelines(f'{data[0]};{data[1]};{data[2]};{data[3]};{data[4]};{data[5]};{data[6]};{data[7]};{data[8]};{data[9]}\n')
    return "Фай загружен"

# def find_by_number(data: list, phone_number: str) -> str:
#     for el in data:
#         if el.get("Телефон") == phone_number:
#             return f'{el.get("Фамилия")}, {el.get("Имя")}'
#     return "Такой абонент отсутвует"
